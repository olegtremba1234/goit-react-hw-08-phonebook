{"version":3,"file":"static/js/313.a0afbfdf.chunk.js","mappings":"8LAAA,IAAMA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,UAAf,EAEnBC,EAAe,SAAAH,GAAK,uBAAIA,EAAMC,KAAKG,YAAf,aAAI,EAAiBC,KAArB,C,yECS1B,UANoB,SAAC,GAAwC,IAAD,IAArCC,WAAAA,OAAqC,SAAjBC,EAAiB,EAAjBA,WAGzC,OAFmBC,EAAAA,EAAAA,IAAYT,EAAAA,IACMO,GACb,SAAC,KAAD,CAAUG,GAAIF,KAAiB,SAAC,KAAD,GACxD,C","sources":["redux/auth/authSelectors.js","routes/PublicRoute.js"],"sourcesContent":["const getLoggedIn = state => state.auth.isLoggedIn;\n\nconst getUserEmail = state => state.auth.user?.email;\n\nexport { getLoggedIn, getUserEmail };","import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { getLoggedIn } from 'redux/auth/authSelectors';\n\nconst PublicRoute = ({ restricted = false, redirectTo }) => {\n  const isLoggedIn = useSelector(getLoggedIn);\n  const shouldRedirect = isLoggedIn && restricted;\n  return shouldRedirect ? <Navigate to={redirectTo} /> : <Outlet />;\n};\n\nexport default PublicRoute;\n\nPublicRoute.propTypes = {\n  restricted: PropTypes.bool.isRequired,\n  redirectTo: PropTypes.string.isRequired,\n};"],"names":["getLoggedIn","state","auth","isLoggedIn","getUserEmail","user","email","restricted","redirectTo","useSelector","to"],"sourceRoot":""}